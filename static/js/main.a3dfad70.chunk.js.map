{"version":3,"sources":["logo.svg","Algorithms/util.js","Algorithms/quickhull.js","Algorithms/grahamScan.js","Components/ConvexHullVisualizer.jsx","Algorithms/jarvisMarch.js","Components/Controls.jsx","Components/Footer.jsx","Components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","checkLineForPoint","A","B","M","Math","sign","x","y","getLeftmostPoint","points","leftmost","i","length","sqr","dist2","v","w","distToSegment","p","sqrt","l2","t","max","min","distToSegmentSquared","findHull","S","q","convexHull","animations","farthest","bestDist","push","top","a","b","currBest","hull","slice","splice","left","right","rightOfPC","leftOfQC","ccw","c","val","getPolarAngle","deltaX","deltaY","atan2","PI","canvasWidth","canvasHeight","globalContext","parentReference","timeouts","pointRadius","strokeWidth","animating","renderPoints","context","fillStyle","setTimeout","j","beginPath","arc","fill","animationDuration","simpleDrawPoints","drawConvexHull","moveTo","lineTo","clearTimeouts","forEach","clearTimeout","jarvisMarch","props","stopAnimation","pointOnHull","endpoint","getJarvisMarchAnimations","clearRect","canvas","width","height","currAnim","lineWidth","strokeStyle","stroke","animationFinished","grahamScan","stack","lowest","getLowestYPoint","sort","pop","getGrahamScanAnimations","quickHull","rightmost","getRightmostPoint","S1","S2","orientation","getQuickhullAnimations","idx","drawConvexHullQH","getRandomInt","ceil","floor","random","ConvexHullVisualizer","forwardRef","ref","canvasRef","useRef","window","devicePixelRatio","useImperativeHandle","generateRandomPoints","randomVec","runJarvisMarch","runGrahamScan","runQuickhull","runDeletePoints","emptyCallback","deletePoints","useEffect","current","getContext","ratio","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","getPixelRatio","getComputedStyle","getPropertyValue","style","addEventListener","e","clientX","clientY","canvasClicked","cancelAnimationFrame","requestId","innerHeight","className","Controls","childFunction","algo","algoButtons","document","getElementsByClassName","enabled","numBars","state","numPoints","sliderEnabled","id","functionCallFromParent","setState","setEmpty","updateBars","buttons","this","empty","disableUI","enableUI","getElementById","value","onClick","disabled","transform","size","icon","faTrash","Component","Footer","showDescription","algRunning","undefined","elem","text","Main","parentFunction","data_from_child","visualizer","refs","child","controlChild","footerChild","bind","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3dfad70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Determines wheater a point M is positioned on the \"left\" or \"right\" of AB.\n// The parameters need to be point objects containing x and y components.\nexport function checkLineForPoint(A, B, M) {\n    return Math.sign((B.x - A.x) * (M.y - A.y) - (B.y - A.y) * (M.x - A.x));\n}\n\n// Returns the leftmost point in the points array\nexport function getLeftmostPoint(points) {\n    let leftmost = points[0];\n\n    for (let i = 1; i < points.length; ++i) {\n        if (points[i].x < leftmost.x) {\n            leftmost = points[i];\n        }\n    }\n\n    return leftmost;\n}\n\nexport function getRightmostPoint(points) {\n    let rightmost = points[0];\n\n    for (let i = 1; i < points.length; ++i) {\n        if (points[i].x > rightmost.x) {\n            rightmost = points[i];\n        }\n    }\n\n    return rightmost;\n}\n\nfunction sqr(x) { return x * x }\nfunction dist2(v, w) { return sqr(v.x - w.x) + sqr(v.y - w.y) }\nfunction distToSegmentSquared(p, v, w) {\n    var l2 = dist2(v, w);\n    if (l2 == 0) return dist2(p, v);\n    var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;\n    t = Math.max(0, Math.min(1, t));\n    return dist2(p, {\n        x: v.x + t * (w.x - v.x),\n        y: v.y + t * (w.y - v.y)\n    });\n}\nexport function distToSegment(p, v, w) { return Math.sqrt(distToSegmentSquared(p, v, w)); }","import { getLeftmostPoint, getRightmostPoint, checkLineForPoint, distToSegment } from \"./util.js\";\n\nexport function getQuickhullAnimations(points) {\n\tlet animations = [];\n\n\tlet convexHull = [];\n\tlet leftmost = getLeftmostPoint(points);\n\tlet rightmost = getRightmostPoint(points);\n\tconvexHull.push(leftmost);\n\tconvexHull.push(rightmost);\n\n\tanimations.push({\n\t\ttop: null,\n\t\ta: leftmost,\n\t\tb: rightmost,\n\t\tcurrBest: rightmost,\n\t\thull: convexHull.slice(0),\n\t});\n\n\tlet S1 = [];\n\tlet S2 = [];\n\tfor (let i = 0; i < points.length; ++i) {\n\t\tlet orientation = checkLineForPoint(leftmost, rightmost, points[i]);\n\t\tif (orientation < 0) {\n\t\t\tS1.push(points[i]);\n\t\t}\n\n\t\tif (orientation > 0) {\n\t\t\tS2.push(points[i]);\n\t\t}\n\t}\n\n\tfindHull(S1, leftmost, rightmost, convexHull, animations);\n\tfindHull(S2, rightmost, leftmost, convexHull, animations);\n\n\t// animations.push({\n\t// \ta: null,\n\t// \tb: null,\n\t// \tcurrBest: null,\n\t// \thull: convexHull,\n\t// });\n\n\treturn animations;\n}\n\nfunction findHull(S, p, q, convexHull, animations) {\n\tif (S.length === 0) {\n\t\treturn;\n\t}\n\n\tlet farthest = S[0];\n\tlet bestDist = distToSegment(farthest, p, q);\n\n\t// Find farthest point from PQ\n\tfor (let i = 0; i < S.length; ++i) {\n\t\tanimations.push({\n\t\t\ttop: S[i],\n\t\t\ta: p,\n\t\t\tb: q,\n\t\t\tcurrBest: farthest,\n\t\t\thull: convexHull.slice(0),\n\t\t});\n\n\t\tlet currDist = distToSegment(S[i], p, q);\n\t\tif (currDist > bestDist) {\n\t\t\tfarthest = S[i];\n\t\t\tbestDist = distToSegment(farthest, p, q);\n\t\t}\n\t}\n\n\tfor (let i = 0; i < convexHull.length; ++i) {\n\t\tif (convexHull[i] === p) {\n\t\t\tconvexHull.splice(i, 0, farthest);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tanimations.push({\n\t\ttop: null,\n\t\ta: p,\n\t\tb: q,\n\t\tcurrBest: farthest,\n\t\thull: convexHull.slice(0),\n\t});\n\n\tanimations.push({\n\t\ttop: null,\n\t\ta: null,\n\t\tb: null,\n\t\tcurrBest: null,\n\t\thull: convexHull.slice(0),\n\t});\n\n\t// Partition\n\tlet left = [];\n\tlet right = [];\n\n\tfor (let i = 0; i < S.length; ++i) {\n\t\tlet rightOfPC = checkLineForPoint(p, farthest, S[i]) > 0;\n\t\tlet leftOfQC = checkLineForPoint(q, farthest, S[i]) < 0;\n\n\t\tif (rightOfPC && leftOfQC) {\n\t\t\tcontinue;\n\t\t} else if (!rightOfPC && S[i] !== p && S[i] !== farthest) {\n\t\t\tleft.push(S[i]);\n\t\t} else if (!leftOfQC && S[i] !== q && S[i] !== farthest) {\n\t\t\tright.push(S[i]);\n\t\t}\n\t}\n\n\tfindHull(left, p, farthest, convexHull, animations);\n\tfindHull(right, farthest, q, convexHull, animations);\n}","export function getGrahamScanAnimations(points) {\n    let animations = [];\n    let stack = [];\n\n    var counter = false;\n\n    let lowest = getLowestYPoint(points);\n    points.sort(function (a, b) { return getPolarAngle(lowest, a) - getPolarAngle(lowest, b) });\n\n    for (let i = 0; i < points.length; ++i) {\n        while (stack.length > 1 && ccw(stack[stack.length - 2], stack[stack.length - 1], points[i]) <= 0) {\n            animations.push({\n                a: stack[stack.length - 1],\n                b: stack[stack.length - 1],\n                currBest: points[i],\n                hull: stack.slice(0),\n            });\n\n            stack.pop();\n        }\n\n        if (stack.length > 1) {\n            animations.push({\n                a: stack[stack.length - 1],\n                b: stack[stack.length - 1],\n                currBest: points[i],\n                hull: stack.slice(0),\n            });\n        }\n\n        stack.push(points[i]);\n    }\n\n    stack.push(stack[0]);\n    animations.push({\n        a: null,\n        b: null,\n        currBest: null,\n        hull: stack.slice(0),\n    });\n\n    return animations;\n}\n\nfunction ccw(a, b, c) {\n    let val = (b.y - a.y) * (c.x - b.x) -\n        (b.x - a.x) * (c.y - b.y);\n\n    if (val == 0) return 0;\n\n    return (val < 0) ? 1 : -1;\n}\n\nfunction getPolarAngle(a, b) {\n    let deltaX = (b.x - a.x);\n    let deltaY = (b.y - a.y);\n\n    if (deltaX === 0 && deltaY === 0) return 0;\n\n    return Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n}\n\nfunction getLowestYPoint(points) {\n    let lowest = points[0];\n\n    for (let i = 1; i < points.length; ++i) {\n        if (points[i].y === lowest.y) {\n            if (points[i].x < lowest.x) {\n                lowest = points[i];\n            }\n        } else if (points[i].y > lowest.y) {\n            lowest = points[i];\n        }\n    }\n\n    return lowest;\n}","import React from \"react\";\nimport { forwardRef, useImperativeHandle, useEffect, useRef } from \"react\";\nimport { getJarvisMarchAnimations } from \"../Algorithms/jarvisMarch.js\";\nimport { getQuickhullAnimations } from \"../Algorithms/quickhull.js\";\nimport { render } from \"react-dom\";\nimport { getGrahamScanAnimations } from \"../Algorithms/grahamScan.js\";\n\n// Constants\nconst POINT_COLOR = \"cornflowerblue\";\nconst LINE_COLOR = \"lightskyblue\";\nconst HULL_COLOR = \"royalblue\";\nconst CURR_COLOR = \"mediumpurple\";\nconst EXTRA_COLOR = \"cornflowerblue\";\nconst AREA_COLOR_2 = \"rgb(65,105,225, 0.1)\";\nconst AREA_COLOR = \"rgb(100,149,237, 0.1)\";\n\nvar canvasWidth, canvasHeight;\nvar numberOfPoints = 50;\nvar points = [];\n\nvar globalContext;\nvar timeouts = [];\n\nvar parentReference;\n\n// Animation stuff\nvar animationDuration = 3000;\nvar animationSpeed = (animationDuration / numberOfPoints) * 2;\nconst QUICKHULL_SPEED = 0.75;\nconst JARVIS_SPEED = 1.5;\nconst GRAHAM_SPEED = 0.4;\n\nvar pointRadius = 15;\nvar strokeWidth = 10;\n\nvar animating = false;\n\nvar empty = true;\n\nconst generateRandomPoints = () => {\n    if (parentReference !== null) parentReference.emptyCallback(false);\n\n    for (let i = 0; i < numberOfPoints; ++i) {\n        let randomVec = {\n            x: getRandomInt(canvasWidth / 10, canvasWidth - canvasWidth / 10),\n            y: getRandomInt(\n                canvasHeight / 10,\n                canvasHeight - canvasHeight / 10\n            ),\n        };\n        points.push(randomVec);\n    }\n};\n\nconst renderPoints = (context) => {\n    globalContext.fillStyle = POINT_COLOR;\n\n    for (let i = 0; i < points.length; ++i) {\n        timeouts.push(\n            setTimeout(() => {\n                let p = points[i];\n\n                for (let j = 0; j < 5; ++j) {\n                    timeouts.push(\n                        setTimeout(() => {\n                            context.beginPath();\n                            context.arc(\n                                p.x,\n                                p.y,\n                                (j * pointRadius) / 5,\n                                0,\n                                2 * Math.PI\n                            );\n                            context.fill();\n                        }, j * 50)\n                    );\n                }\n            }, (i * animationSpeed) / 10)\n        );\n    }\n};\n\nconst simpleDrawPoints = () => {\n    globalContext.fillStyle = POINT_COLOR;\n    for (let i = 0; i < points.length; ++i) {\n        let p = points[i];\n\n        for (let j = 0; j < 5; ++j) {\n            globalContext.beginPath();\n            globalContext.arc(p.x, p.y, (j * pointRadius) / 5, 0, 2 * Math.PI);\n            globalContext.fill();\n        }\n    }\n};\n\nconst drawConvexHull = (convexHull) => {\n    globalContext.moveTo(convexHull[0].x, convexHull[0].y);\n    for (let i = 1; i < convexHull.length; ++i) {\n        globalContext.lineTo(convexHull[i].x, convexHull[i].y);\n    }\n\n    globalContext.fillStyle = AREA_COLOR_2;\n    globalContext.fill();\n};\n\nconst drawConvexHullQH = (convexHull) => {\n    globalContext.moveTo(convexHull[0].x, convexHull[0].y);\n    for (let i = 1; i < convexHull.length + 1; ++i) {\n        let idx = i % convexHull.length;\n        globalContext.lineTo(convexHull[idx].x, convexHull[idx].y);\n    }\n\n    globalContext.fillStyle = AREA_COLOR_2;\n    globalContext.fill();\n};\n\nconst executeAnimations = (animations) => {};\n\nconst clearTimeouts = () => {\n    timeouts.forEach((t) => {\n        clearTimeout(t);\n    });\n    timeouts = [];\n};\n\n// Algorithm callers\nconst jarvisMarch = (props) => {\n    if (!animating) {\n        animating = true;\n        clearTimeouts();\n\n        // Execute jarvis march\n        let animations = getJarvisMarchAnimations(points);\n\n        for (let i = 0; i < animations.length; ++i) {\n            timeouts.push(\n                setTimeout(() => {\n                    globalContext.clearRect(\n                        0,\n                        0,\n                        globalContext.canvas.width,\n                        globalContext.canvas.height\n                    );\n\n                    let currAnim = animations[i];\n                    globalContext.lineWidth = strokeWidth;\n\n                    if (currAnim.a !== null) {\n                        // draw current comparison\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = CURR_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(currAnim.b.x, currAnim.b.y);\n                        globalContext.stroke();\n\n                        // draw current best\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = EXTRA_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(\n                            currAnim.currBest.x,\n                            currAnim.currBest.y\n                        );\n                        globalContext.stroke();\n                    }\n\n                    // draw hull so far\n                    globalContext.beginPath();\n                    globalContext.strokeStyle = HULL_COLOR;\n                    drawConvexHull(currAnim.hull);\n                    globalContext.stroke();\n\n                    simpleDrawPoints();\n\n                    globalContext.fillStyle = HULL_COLOR;\n\n                    globalContext.moveTo(\n                        currAnim.hull[0].x,\n                        currAnim.hull[0].y\n                    );\n                    for (let i = 0; i < currAnim.hull.length; ++i) {\n                        globalContext.beginPath();\n                        globalContext.arc(\n                            currAnim.hull[i].x,\n                            currAnim.hull[i].y,\n                            pointRadius,\n                            0,\n                            2 * Math.PI\n                        );\n                        globalContext.fill();\n                    }\n\n                    if (i === animations.length - 1) {\n                        animating = false;\n                        props.animationFinished();\n                    }\n                }, (animationSpeed * i) / JARVIS_SPEED)\n            );\n        }\n    } else {\n        stopAnimation();\n    }\n\n    // globalContext.strokeStyle = \"mediumpurple\";\n    // globalContext.lineWidth = 10;\n\n    // globalContext.beginPath();\n    // globalContext.moveTo(convexHull[0].x, convexHull[0].y);\n    // for (let i = 1; i < convexHull.length; ++i) {\n    //     globalContext.lineTo(convexHull[i].x, convexHull[i].y);\n    // }\n\n    // globalContext.stroke();\n};\n\nconst grahamScan = (props) => {\n    if (!animating) {\n        animating = true;\n        clearTimeouts();\n\n        // Execute jarvis march\n        let animations = getGrahamScanAnimations(points);\n\n        for (let i = 0; i < animations.length; ++i) {\n            timeouts.push(\n                setTimeout(() => {\n                    globalContext.clearRect(\n                        0,\n                        0,\n                        globalContext.canvas.width,\n                        globalContext.canvas.height\n                    );\n\n                    let currAnim = animations[i];\n                    globalContext.lineWidth = strokeWidth;\n\n                    if (currAnim.a !== null) {\n                        // draw current comparison\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = HULL_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(currAnim.b.x, currAnim.b.y);\n                        globalContext.stroke();\n\n                        // draw current best\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = CURR_COLOR;\n                        globalContext.moveTo(currAnim.b.x, currAnim.b.y);\n                        globalContext.lineTo(\n                            currAnim.currBest.x,\n                            currAnim.currBest.y\n                        );\n                        globalContext.stroke();\n                    }\n\n                    // draw hull so far\n                    globalContext.beginPath();\n                    globalContext.strokeStyle = HULL_COLOR;\n                    drawConvexHull(currAnim.hull);\n                    globalContext.stroke();\n\n                    simpleDrawPoints();\n\n                    globalContext.fillStyle = HULL_COLOR;\n\n                    globalContext.moveTo(\n                        currAnim.hull[0].x,\n                        currAnim.hull[0].y\n                    );\n                    for (let i = 0; i < currAnim.hull.length; ++i) {\n                        globalContext.beginPath();\n                        globalContext.arc(\n                            currAnim.hull[i].x,\n                            currAnim.hull[i].y,\n                            pointRadius,\n                            0,\n                            2 * Math.PI\n                        );\n                        globalContext.fill();\n                    }\n\n                    if (i === animations.length - 1) {\n                        animating = false;\n                        props.animationFinished();\n                    }\n                }, (animationSpeed * i) / GRAHAM_SPEED)\n            );\n        }\n    } else {\n        stopAnimation();\n    }\n};\n\nconst quickHull = (props) => {\n    if (!animating) {\n        animating = true;\n        // Execute quickhull\n        clearTimeouts();\n\n        // Execute jarvis march\n        let animations = getQuickhullAnimations(points);\n\n        for (let i = 0; i < animations.length; ++i) {\n            timeouts.push(\n                setTimeout(() => {\n                    globalContext.clearRect(\n                        0,\n                        0,\n                        globalContext.canvas.width,\n                        globalContext.canvas.height\n                    );\n\n                    let currAnim = animations[i];\n                    globalContext.lineWidth = strokeWidth;\n\n                    if (currAnim.top !== null) {\n                        // draw current comparison\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = CURR_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(currAnim.top.x, currAnim.top.y);\n                        globalContext.stroke();\n\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = CURR_COLOR;\n                        globalContext.moveTo(currAnim.b.x, currAnim.b.y);\n                        globalContext.lineTo(currAnim.top.x, currAnim.top.y);\n                        globalContext.stroke();\n\n                        // best triangle\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = EXTRA_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(\n                            currAnim.currBest.x,\n                            currAnim.currBest.y\n                        );\n                        globalContext.stroke();\n\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = EXTRA_COLOR;\n                        globalContext.moveTo(currAnim.b.x, currAnim.b.y);\n                        globalContext.lineTo(\n                            currAnim.currBest.x,\n                            currAnim.currBest.y\n                        );\n                        globalContext.stroke();\n\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = EXTRA_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(currAnim.b.x, currAnim.b.y);\n                        globalContext.stroke();\n                    } else {\n                        if (currAnim.a !== null) {\n                            // draw current comparison\n                            globalContext.beginPath();\n                            globalContext.strokeStyle = CURR_COLOR;\n                            globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                            globalContext.lineTo(currAnim.b.x, currAnim.b.y);\n                            globalContext.stroke();\n                        }\n\n                        if (currAnim.currBest != null) {\n                            // draw current best\n                            globalContext.beginPath();\n                            globalContext.strokeStyle = EXTRA_COLOR;\n                            globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                            globalContext.lineTo(\n                                currAnim.currBest.x,\n                                currAnim.currBest.y\n                            );\n                            globalContext.stroke();\n                        }\n                    }\n\n                    // draw hull so far\n                    globalContext.beginPath();\n                    globalContext.strokeStyle = HULL_COLOR;\n                    drawConvexHullQH(currAnim.hull);\n                    globalContext.stroke();\n\n                    simpleDrawPoints();\n\n                    globalContext.fillStyle = HULL_COLOR;\n\n                    globalContext.moveTo(\n                        currAnim.hull[0].x,\n                        currAnim.hull[0].y\n                    );\n                    for (let i = 0; i < currAnim.hull.length; ++i) {\n                        globalContext.beginPath();\n                        globalContext.arc(\n                            currAnim.hull[i].x,\n                            currAnim.hull[i].y,\n                            pointRadius,\n                            0,\n                            2 * Math.PI\n                        );\n                        globalContext.fill();\n                    }\n\n                    if (i === animations.length - 1) {\n                        animating = false;\n                        props.animationFinished();\n                    }\n                }, (animationSpeed * i) / QUICKHULL_SPEED)\n            );\n        }\n    } else {\n        stopAnimation();\n    }\n};\n\nconst getPixelRatio = (context) => {\n    var backingStore =\n        context.backingStorePixelRatio ||\n        context.webkitBackingStorePixelRatio ||\n        context.mozBackingStorePixelRatio ||\n        context.msBackingStorePixelRatio ||\n        context.oBackingStorePixelRatio ||\n        context.backingStorePixelRatio ||\n        1;\n\n    return (window.devicePixelRatio || 1) / backingStore;\n};\n\nconst stopAnimation = () => {\n    animating = false;\n    clearTimeouts();\n    globalContext.clearRect(\n        0,\n        0,\n        globalContext.canvas.width,\n        globalContext.canvas.height\n    );\n    simpleDrawPoints();\n};\n\nconst deletePoints = () => {\n    if (parentReference !== null) parentReference.emptyCallback(true);\n\n    clearTimeouts();\n    for (let i = 0; i < 4; ++i) {\n        timeouts.push(\n            setTimeout(() => {\n                globalContext.clearRect(\n                    0,\n                    0,\n                    globalContext.canvas.width,\n                    globalContext.canvas.height\n                );\n\n                for (let j = 0; j < points.length; ++j) {\n                    let p = points[j];\n                    globalContext.beginPath();\n                    globalContext.arc(p.x, p.y, (3 - i) * 3, 0, 2 * Math.PI);\n                    globalContext.fill();\n                }\n\n                if (i === 3) {\n                    points = [];\n                    globalContext.clearRect(\n                        0,\n                        0,\n                        globalContext.canvas.width,\n                        globalContext.canvas.height\n                    );\n                }\n            }, i * 35)\n        );\n    }\n\n    // points = [];\n    // globalContext.clearRect(\n    //     0,\n    //     0,\n    //     globalContext.canvas.width,\n    //     globalContext.canvas.height\n    // );\n    // simpleDrawPoints();\n};\n\nconst canvasClicked = (e, ratio) => {\n    if (parentReference !== null) parentReference.emptyCallback(false);\n    globalContext.fillStyle = POINT_COLOR;\n    let p = {\n        x: e.clientX * window.devicePixelRatio,\n        y:\n            e.clientY * window.devicePixelRatio -\n            175 -\n            90 * window.devicePixelRatio,\n    };\n    points.push(p);\n\n    for (let j = 0; j < 5; ++j) {\n        timeouts.push(\n            setTimeout(() => {\n                globalContext.beginPath();\n                globalContext.arc(\n                    p.x,\n                    p.y,\n                    (j * pointRadius) / 5,\n                    0,\n                    2 * Math.PI\n                );\n                globalContext.fill();\n            }, j * 50)\n        );\n    }\n\n    //simpleDrawPoints();\n};\n\nconst ConvexHullVisualizer = forwardRef((props, ref) => {\n    let canvasRef = useRef();\n    pointRadius = 7.5 * window.devicePixelRatio;\n    strokeWidth = 5 * window.devicePixelRatio;\n\n    parentReference = props;\n\n    useImperativeHandle(ref, () => ({\n        generateRandomPoints() {\n            timeouts.forEach((t) => {\n                clearTimeout(t);\n            });\n            timeouts = [];\n\n            globalContext.clearRect(\n                0,\n                0,\n                globalContext.canvas.width,\n                globalContext.canvas.height\n            );\n\n            points = [];\n            for (let i = 0; i < numberOfPoints; ++i) {\n                let randomVec = {\n                    x: getRandomInt(200, canvasWidth - 200),\n                    y: getRandomInt(200, canvasHeight - 200),\n                };\n                points.push(randomVec);\n            }\n\n            renderPoints(globalContext);\n        },\n        runJarvisMarch() {\n            jarvisMarch(props);\n        },\n        runGrahamScan() {\n            grahamScan(props);\n        },\n        runQuickhull() {\n            quickHull(props);\n        },\n        runDeletePoints() {\n            deletePoints();\n        },\n    }));\n\n    useEffect(() => {\n        let canvas = canvasRef.current;\n        let context = canvas.getContext(\"2d\");\n        globalContext = context;\n\n        let ratio = getPixelRatio(context);\n        let width = getComputedStyle(canvas)\n            .getPropertyValue(\"width\")\n            .slice(0, -2);\n        let height = getComputedStyle(canvas)\n            .getPropertyValue(\"height\")\n            .slice(0, -2);\n\n        canvas.width = width * ratio;\n        canvas.height = height * ratio;\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n\n        canvasWidth = canvas.width;\n        canvasHeight = canvas.height;\n\n        let requestId;\n\n        // Render Setup\n        generateRandomPoints();\n\n        context.beginPath();\n\n        context.fillStyle = POINT_COLOR;\n        renderPoints(context);\n\n        context.fill();\n\n        canvas.addEventListener(\n            \"click\",\n            function (e) {\n                canvasClicked(e, ratio);\n            },\n            false\n        );\n\n        // Main render function\n        const render = () => {\n            //context.clearRect(0, 0, canvas.width, canvas.height);\n            // context.beginPath();\n            // context.fillStyle = POINT_COLOR;\n            // renderPoints(context);\n            // context.fill();\n            // requestId = requestAnimationFrame(render);\n        };\n\n        render();\n\n        return () => {\n            cancelAnimationFrame(requestId);\n        };\n    });\n\n    const style = {\n        width: \"100%\",\n        height: window.innerHeight - 400,\n    };\n\n    return (\n        <div className=\"convexhull\">\n            <canvas ref={canvasRef} style={style} />\n        </div>\n    );\n});\n\n// Utility function creating an int in the specified range\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport default ConvexHullVisualizer;\n","import { getLeftmostPoint, checkLineForPoint } from \"./util.js\";\n\nexport function getJarvisMarchAnimations(points) {\n\tlet animations = [];\n\n\tlet pointOnHull = getLeftmostPoint(points);\n\tlet endpoint = points[0];\n\tlet convexHull = [];\n\n\tlet i = 0;\n\twhile (endpoint !== convexHull[0]) {\n\t\tconvexHull.push(pointOnHull);\n\t\tendpoint = points[0];\n\n\t\tanimations.push({\n\t\t\ta: convexHull[i],\n\t\t\tb: endpoint,\n\t\t\tcurrBest: endpoint,\n\t\t\thull: convexHull.slice(0),\n\t\t});\n\n\t\tfor (let j = 0; j < points.length; ++j) {\n\t\t\tanimations.push({\n\t\t\t\ta: convexHull[i],\n\t\t\t\tb: points[j],\n\t\t\t\tcurrBest: endpoint,\n\t\t\t\thull: convexHull.slice(0),\n\t\t\t});\n\n\t\t\tif (endpoint === pointOnHull || checkLineForPoint(convexHull[i], endpoint, points[j]) === -1) {\n\t\t\t\tendpoint = points[j];\n\n\t\t\t\tanimations.push({\n\t\t\t\t\ta: convexHull[i],\n\t\t\t\t\tb: points[j],\n\t\t\t\t\tcurrBest: endpoint,\n\t\t\t\t\thull: convexHull.slice(0),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ti += 1;\n\t\tpointOnHull = endpoint;\n\t}\n\n\tconvexHull.push(convexHull[0]);\n\n\tanimations.push({\n\t\ta: null,\n\t\tb: null,\n\t\tcurrBest: null,\n\t\thull: convexHull,\n\t});\n\n\treturn animations;\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Controls extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            numPoints: 100,\n            enabled: [true, true, true, true, true, true, true, true, true],\n            sliderEnabled: true,\n        };\n    }\n\n    childFunction = (algo) => {\n        const algoButtons = document.getElementsByClassName(\"algoBtn\");\n        var enabled = [];\n        const numBars = this.state.numPoints;\n\n        var sliderEnabled = false;\n\n        if (algo !== 0 && algo !== 4) {\n            if (!this.state.enabled[0]) {\n                for (let i = 0; i < this.state.enabled.length; ++i) {\n                    enabled[i] = true;\n                    algoButtons[algo - 1].id = \"none\";\n                }\n                sliderEnabled = true;\n                this.props.functionCallFromParent(algo, false);\n            } else {\n                for (let i = 0; i < this.state.enabled.length; ++i) {\n                    enabled[i] = false;\n                }\n\n                enabled[algo] = true;\n                algoButtons[algo - 1].id = \"playing\";\n\n                this.props.functionCallFromParent(algo, true);\n            }\n\n            this.setState({ numBars, enabled, sliderEnabled });\n        } else {\n            if (algo === 0) this.setEmpty(false);\n\n            this.props.functionCallFromParent(algo, false);\n        }\n    };\n\n    disableUI() {\n        const buttons = document.getElementsByClassName(\"algoBtn\");\n\n        const enabled = [true];\n\n        for (let i = 0; i < buttons.length; ++i) {\n            enabled.push(false);\n            buttons[i].id = \"none\";\n        }\n\n        enabled.push(false);\n\n        const numBars = this.state.numPoints;\n\n        this.setState({ numBars, enabled, sliderEnabled: true });\n    }\n\n    enableUI() {\n        const buttons = document.getElementsByClassName(\"algoBtn\");\n\n        const enabled = [true];\n\n        for (let i = 0; i < buttons.length; ++i) {\n            enabled.push(true);\n            buttons[i].id = \"none\";\n        }\n\n        enabled.push(true);\n\n        const numBars = this.state.numPoints;\n\n        this.setState({ numBars, enabled, sliderEnabled: true });\n    }\n\n    setEmpty(empty) {\n        if (empty) {\n            this.disableUI();\n        } else {\n            this.enableUI();\n        }\n    }\n\n    updateBars = () => {\n        this.props.updateBars();\n    };\n\n    setNumBars() {\n        var slider = document.getElementById(\"numberOfBars\");\n        const numBars = slider.value;\n        //this.resetArray();\n        this.setState({ numBars });\n        this.updateBars();\n    }\n\n    render() {\n        return (\n            <div className=\"controls\">\n                <button\n                    onClick={() => this.childFunction(0)}\n                    className=\"randomizeBtn\"\n                    disabled={!this.state.enabled[0]}\n                >\n                    Generate Points\n                </button>\n                <button\n                    onClick={() => this.childFunction(1)}\n                    className=\"algoBtn\"\n                    id=\"jarvisBtn\"\n                    disabled={!this.state.enabled[1]}\n                >\n                    Jarvis March\n                </button>\n                <button\n                    onClick={() => this.childFunction(2)}\n                    className=\"algoBtn\"\n                    id=\"grahamBtn\"\n                    disabled={!this.state.enabled[2]}\n                >\n                    Graham Scan\n                </button>\n                <button\n                    onClick={() => this.childFunction(3)}\n                    className=\"algoBtn\"\n                    id=\"quickhullBtn\"\n                    disabled={!this.state.enabled[3]}\n                >\n                    Quickhull\n                </button>\n                <button\n                    onClick={() => this.childFunction(4)}\n                    className=\"deleteBtn\"\n                    disabled={!this.state.enabled[4]}\n                >\n                    <FontAwesomeIcon\n                        className=\"trash\"\n                        transform=\"shrink-4 up-3\"\n                        size=\"2x\"\n                        icon={faTrash}\n                    />\n                </button>\n                {/* <br />\n        <p>Number of bars: {this.state.numPoints}</p>\n        <input\n          type=\"range\"\n          min=\"10\"\n          max=\"300\"\n          value={this.state.numPoints}\n          disabled={!this.state.sliderEnabled}\n          className=\"slider\"\n          id=\"numberOfPoints\"\n          onChange={() => this.setNumBars()}\n        /> */}\n            </div>\n        );\n    }\n}\n\nexport default Controls;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Footer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algo: -1,\n            algRunning: false,\n            text: \"sick\",\n        };\n    }\n\n    showDescription = (algo, state) => {\n        this.state.algo = algo;\n\n        if (this.state.algRunning !== state) {\n            this.state.algRunning = state;\n\n            if (state) {\n                var elem = document.getElementsByClassName(\"description\");\n                if (elem[0] !== undefined)\n                    elem[0].className = \"descriptionVisible\";\n\n                switch (this.state.algo) {\n                    case 1:\n                        this.state.text = `Jarvis March works by starting at\n                        the leftmost point (which is obviously part of the\n                        convex hull) and checking every point in the set to\n                        determine the point with the greatest angle. This point is guaranteed to be \n                        part of the convex hull and gets added to our result. The algorithm then repeats this process, starting\n                        from that point. Since we are traversing through the entire array once for each of the points, we get a time complexity of O(n^2). The process looks a\n                        lot like you're \"wrapping\" the set with a ribbon, hence\n                        the nickname \"Gift wrapping algorithm\".`;\n                        break;\n                    case 2:\n                        this.state.text = `Graham Scan works by first finding the point with the lowest y coordinate (or the lowest point), \n                        this is the pivot. After that, it sorts the set of points by their polar angle to the pivot. The algorithm then traverses the points, three at a time.\n                        These triplets are then checked for the kind of \"curve\" they form: clockwise or counterclockwise. If there is a counterclockwise turn, we delete\n                        the middle point and continue forming the convex hull in this way.`;\n                        break;\n                    case 3:\n                        this.state.text = `Quickhull works much like Quicksort does, as it is fundamentally based on recursion. It also\n                        shares Quicksorts time complexity at O(nlogn). First, the algorithm finds the line that\n                        stretches from the leftmost to the rightmost point. It separates all points into two groups: Left from that line and right from that line. The recursive step finds\n                        the point with the furthest distance from that line and froms a triangle with that point and the original line (that point is part of the convex hull for sure). \n                        All points inside that triangle are discarded. This step gets called recursively until we are done.`;\n                        break;\n                    default:\n                        this.state.text = \"ERROR\";\n                        break;\n                }\n\n                this.setState(this.state);\n            } else {\n                var elem = document.getElementsByClassName(\n                    \"descriptionVisible\"\n                );\n                if (elem[0] !== undefined) elem[0].className = \"description\";\n            }\n        }\n    };\n\n    render() {\n        var text = this.state.text;\n        return (\n            <div className=\"descriptionBox\">\n                <div className=\"description\">\n                    <span>{text}</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConvexHullVisualizer from \"./ConvexHullVisualizer\";\nimport Controls from \"./Controls\";\nimport Footer from \"./Footer\";\n\nvar numberOfBars = 10;\n\nvar algo = 0;\n\nclass Main extends Component {\n    parentFunction = (data_from_child, state) => {\n        algo = data_from_child;\n        const visualizer = this.refs.child;\n\n        this.showDescription(state);\n\n        switch (data_from_child) {\n            case 0:\n                visualizer.generateRandomPoints();\n                //visualizer.resetArray();\n                break;\n            case 1:\n                visualizer.runJarvisMarch();\n                //visualizer.mergeSort();\n                break;\n            case 2:\n                visualizer.runGrahamScan();\n                //visualizer.quickSort();\n                break;\n            case 3:\n                visualizer.runQuickhull();\n                //visualizer.heapSort();\n                break;\n            case 4:\n                visualizer.runDeletePoints();\n                //visualizer.selectionSort();\n                break;\n            default:\n                break;\n        }\n    };\n\n    emptyCallback = (empty) => {\n        this.setEmpty(empty);\n    };\n\n    setEmpty = (empty) => {\n        this.refs.controlChild.setEmpty(empty);\n    };\n\n    updateBars = () => {\n        //this.refs.child.setNumberOfBars();\n    };\n\n    animationFinished = () => {\n        this.refs.controlChild.enableUI();\n        this.refs.footerChild.showDescription(false);\n    };\n\n    showDescription = (state) => {\n        this.refs.footerChild.showDescription(algo, state);\n    };\n\n    render() {\n        return (\n            <div>\n                <Controls\n                    ref=\"controlChild\"\n                    functionCallFromParent={this.parentFunction.bind(this)}\n                    updateBars={this.updateBars.bind(this)}\n                ></Controls>\n                <ConvexHullVisualizer\n                    ref=\"child\"\n                    emptyCallback={this.emptyCallback.bind(this)}\n                    animationFinished={this.animationFinished.bind(this)}\n                ></ConvexHullVisualizer>\n                <Footer\n                    ref=\"footerChild\"\n                    showDescription={this.showDescription.bind(this)}\n                ></Footer>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './Style/style.css';\nimport Main from './Components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}