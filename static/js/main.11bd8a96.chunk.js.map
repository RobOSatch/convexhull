{"version":3,"sources":["logo.svg","Algorithms/util.js","Algorithms/quickhull.js","Components/ConvexHullVisualizer.jsx","Algorithms/jarvisMarch.js","Components/Controls.jsx","Components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","checkLineForPoint","A","B","M","Math","sign","x","y","getLeftmostPoint","points","leftmost","i","length","sqr","dist2","v","w","distToSegment","p","sqrt","l2","t","max","min","distToSegmentSquared","findHull","S","q","convexHull","animations","farthest","bestDist","splice","push","a","b","currBest","hull","slice","left","right","rightOfPC","leftOfQC","canvasWidth","canvasHeight","globalContext","timeouts","pointRadius","strokeWidth","animating","renderPoints","context","fillStyle","setTimeout","j","beginPath","arc","PI","fill","animationDuration","simpleDrawPoints","clearTimeouts","forEach","clearTimeout","jarvisMarch","props","stopAnimation","pointOnHull","endpoint","getJarvisMarchAnimations","clearRect","canvas","width","height","currAnim","lineWidth","strokeStyle","moveTo","lineTo","stroke","drawConvexHull","animationFinished","quickHull","rightmost","getRightmostPoint","S1","S2","orientation","getQuickhullAnimations","idx","drawConvexHullQH","getRandomInt","ceil","floor","random","ConvexHullVisualizer","forwardRef","ref","canvasRef","useRef","window","devicePixelRatio","useImperativeHandle","generateRandomPoints","randomVec","runJarvisMarch","runQuickhull","runDeletePoints","deletePoints","useEffect","current","getContext","ratio","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","getPixelRatio","getComputedStyle","getPropertyValue","style","addEventListener","e","clientX","clientY","canvasClicked","cancelAnimationFrame","requestId","className","Controls","childFunction","algo","functionCallFromParent","algoButtons","document","getElementsByClassName","enabled","numBars","state","numPoints","sliderEnabled","id","setState","updateBars","buttons","this","getElementById","value","onClick","disabled","transform","size","icon","faTrash","Component","Main","parentFunction","data_from_child","visualizer","refs","child","runGrahamScan","controlChild","enableUI","bind","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11bd8a96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Determines wheater a point M is positioned on the \"left\" or \"right\" of AB.\n// The parameters need to be point objects containing x and y components.\nexport function checkLineForPoint(A, B, M) {\n    return Math.sign((B.x - A.x) * (M.y - A.y) - (B.y - A.y) * (M.x - A.x));\n}\n\n// Returns the leftmost point in the points array\nexport function getLeftmostPoint(points) {\n    let leftmost = points[0];\n\n    for (let i = 1; i < points.length; ++i) {\n        if (points[i].x < leftmost.x) {\n            leftmost = points[i];\n        }\n    }\n\n    return leftmost;\n}\n\nexport function getRightmostPoint(points) {\n    let rightmost = points[0];\n\n    for (let i = 1; i < points.length; ++i) {\n        if (points[i].x > rightmost.x) {\n            rightmost = points[i];\n        }\n    }\n\n    return rightmost;\n}\n\nfunction sqr(x) { return x * x }\nfunction dist2(v, w) { return sqr(v.x - w.x) + sqr(v.y - w.y) }\nfunction distToSegmentSquared(p, v, w) {\n    var l2 = dist2(v, w);\n    if (l2 == 0) return dist2(p, v);\n    var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;\n    t = Math.max(0, Math.min(1, t));\n    return dist2(p, {\n        x: v.x + t * (w.x - v.x),\n        y: v.y + t * (w.y - v.y)\n    });\n}\nexport function distToSegment(p, v, w) { return Math.sqrt(distToSegmentSquared(p, v, w)); }","import { getLeftmostPoint, getRightmostPoint, checkLineForPoint, distToSegment } from \"./util.js\";\n\nexport function getQuickhullAnimations(points) {\n\tlet animations = [];\n\n\tlet convexHull = [];\n\tlet leftmost = getLeftmostPoint(points);\n\tlet rightmost = getRightmostPoint(points);\n\tconvexHull.push(leftmost);\n\tconvexHull.push(rightmost);\n\n\tanimations.push({\n\t\ta: leftmost,\n\t\tb: rightmost,\n\t\tcurrBest: rightmost,\n\t\thull: convexHull.slice(0),\n\t});\n\n\tlet S1 = [];\n\tlet S2 = [];\n\tfor (let i = 0; i < points.length; ++i) {\n\t\tlet orientation = checkLineForPoint(leftmost, rightmost, points[i]);\n\t\tif (orientation < 0) {\n\t\t\tS1.push(points[i]);\n\t\t}\n\n\t\tif (orientation > 0) {\n\t\t\tS2.push(points[i]);\n\t\t}\n\t}\n\n\tfindHull(S1, leftmost, rightmost, convexHull, animations);\n\tfindHull(S2, rightmost, leftmost, convexHull, animations);\n\n\t// animations.push({\n\t// \ta: null,\n\t// \tb: null,\n\t// \tcurrBest: null,\n\t// \thull: convexHull,\n\t// });\n\n\treturn animations;\n}\n\nfunction findHull(S, p, q, convexHull, animations) {\n\tif (S.length === 0) {\n\t\treturn;\n\t}\n\n\tlet farthest = S[0];\n\tlet bestDist = distToSegment(farthest, p, q);\n\n\t// Find farthest point from PQ\n\tfor (let i = 0; i < S.length; ++i) {\n\t\tlet currDist = distToSegment(S[i], p, q);\n\t\tif (currDist > bestDist) {\n\t\t\tfarthest = S[i];\n\t\t\tbestDist = distToSegment(farthest, p, q);\n\t\t}\n\t}\n\n\tfor (let i = 0; i < convexHull.length; ++i) {\n\t\tif (convexHull[i] === p) {\n\t\t\tconvexHull.splice(i, 0, farthest);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tanimations.push({\n\t\ta: p,\n\t\tb: q,\n\t\tcurrBest: farthest,\n\t\thull: convexHull.slice(0),\n\t});\n\n\tanimations.push({\n\t\ta: null,\n\t\tb: null,\n\t\tcurrBest: null,\n\t\thull: convexHull.slice(0),\n\t});\n\n\t// Partition\n\tlet left = [];\n\tlet right = [];\n\n\tfor (let i = 0; i < S.length; ++i) {\n\t\tlet rightOfPC = checkLineForPoint(p, farthest, S[i]) > 0;\n\t\tlet leftOfQC = checkLineForPoint(q, farthest, S[i]) < 0;\n\n\t\tif (rightOfPC && leftOfQC) {\n\t\t\tcontinue;\n\t\t} else if (!rightOfPC && S[i] !== p && S[i] !== farthest) {\n\t\t\tleft.push(S[i]);\n\t\t} else if (!leftOfQC && S[i] !== q && S[i] !== farthest) {\n\t\t\tright.push(S[i]);\n\t\t}\n\t}\n\n\tfindHull(left, p, farthest, convexHull, animations);\n\tfindHull(right, farthest, q, convexHull, animations);\n}","import React from \"react\";\nimport { forwardRef, useImperativeHandle, useEffect, useRef } from \"react\";\nimport { getJarvisMarchAnimations } from \"../Algorithms/jarvisMarch.js\";\nimport { getQuickhullAnimations } from \"../Algorithms/quickhull.js\";\nimport { render } from \"react-dom\";\n\n// Constants\nconst POINT_COLOR = \"cornflowerblue\";\nconst LINE_COLOR = \"lightskyblue\";\nconst HULL_COLOR = \"royalblue\";\nconst CURR_COLOR = \"mediumpurple\";\nconst EXTRA_COLOR = \"cornflowerblue\";\nconst AREA_COLOR = \"rgb(65,105,225, 0.08)\";\nconst AREA_COLOR_2 = \"rgb(100,149,237, 0.08)\";\n\nvar canvasWidth, canvasHeight;\nvar numberOfPoints = 100;\nvar points = [];\n\nvar globalContext;\nvar timeouts = [];\n\n// Animation stuff\nvar animationDuration = 3000;\nvar animationSpeed = (animationDuration / numberOfPoints) * 2;\nconst QUICKHULL_SPEED = 0.2;\nconst JARVIS_SPEED = 1.5;\n\nvar pointRadius = 15;\nvar strokeWidth = 10;\n\nvar animating = false;\n\nconst generateRandomPoints = () => {\n    for (let i = 0; i < numberOfPoints; ++i) {\n        let randomVec = {\n            x: getRandomInt(canvasWidth / 10, canvasWidth - canvasWidth / 10),\n            y: getRandomInt(\n                canvasHeight / 10,\n                canvasHeight - canvasHeight / 10\n            ),\n        };\n        points.push(randomVec);\n    }\n};\n\nconst renderPoints = (context) => {\n    globalContext.fillStyle = POINT_COLOR;\n\n    for (let i = 0; i < points.length; ++i) {\n        timeouts.push(\n            setTimeout(() => {\n                let p = points[i];\n\n                for (let j = 0; j < 5; ++j) {\n                    timeouts.push(\n                        setTimeout(() => {\n                            context.beginPath();\n                            context.arc(\n                                p.x,\n                                p.y,\n                                (j * pointRadius) / 5,\n                                0,\n                                2 * Math.PI\n                            );\n                            context.fill();\n                        }, j * 50)\n                    );\n                }\n            }, (i * animationSpeed) / 10)\n        );\n    }\n};\n\nconst simpleDrawPoints = () => {\n    globalContext.fillStyle = POINT_COLOR;\n    for (let i = 0; i < points.length; ++i) {\n        let p = points[i];\n\n        for (let j = 0; j < 5; ++j) {\n            globalContext.beginPath();\n            globalContext.arc(p.x, p.y, (j * pointRadius) / 5, 0, 2 * Math.PI);\n            globalContext.fill();\n        }\n    }\n};\n\nconst drawConvexHull = (convexHull) => {\n    globalContext.moveTo(convexHull[0].x, convexHull[0].y);\n    for (let i = 1; i < convexHull.length; ++i) {\n        globalContext.lineTo(convexHull[i].x, convexHull[i].y);\n    }\n\n    globalContext.fillStyle = AREA_COLOR_2;\n    globalContext.fill();\n};\n\nconst drawConvexHullQH = (convexHull) => {\n    globalContext.moveTo(convexHull[0].x, convexHull[0].y);\n    for (let i = 1; i < convexHull.length + 1; ++i) {\n        let idx = i % convexHull.length;\n        globalContext.lineTo(convexHull[idx].x, convexHull[idx].y);\n    }\n\n    globalContext.fillStyle = AREA_COLOR_2;\n    globalContext.fill();\n};\n\nconst executeAnimations = (animations) => {};\n\nconst clearTimeouts = () => {\n    timeouts.forEach((t) => {\n        clearTimeout(t);\n    });\n    timeouts = [];\n};\n\n// Algorithm callers\nconst jarvisMarch = (props) => {\n    if (!animating) {\n        animating = true;\n        clearTimeouts();\n\n        // Execute jarvis march\n        let animations = getJarvisMarchAnimations(points);\n\n        for (let i = 0; i < animations.length; ++i) {\n            timeouts.push(\n                setTimeout(() => {\n                    globalContext.clearRect(\n                        0,\n                        0,\n                        globalContext.canvas.width,\n                        globalContext.canvas.height\n                    );\n\n                    let currAnim = animations[i];\n                    globalContext.lineWidth = strokeWidth;\n\n                    if (currAnim.a !== null) {\n                        // draw current comparison\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = CURR_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(currAnim.b.x, currAnim.b.y);\n                        globalContext.stroke();\n\n                        // draw current best\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = EXTRA_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(\n                            currAnim.currBest.x,\n                            currAnim.currBest.y\n                        );\n                        globalContext.stroke();\n                    }\n\n                    // draw hull so far\n                    globalContext.beginPath();\n                    globalContext.strokeStyle = HULL_COLOR;\n                    drawConvexHull(currAnim.hull);\n                    globalContext.stroke();\n\n                    simpleDrawPoints();\n\n                    globalContext.fillStyle = HULL_COLOR;\n\n                    globalContext.moveTo(\n                        currAnim.hull[0].x,\n                        currAnim.hull[0].y\n                    );\n                    for (let i = 0; i < currAnim.hull.length; ++i) {\n                        globalContext.beginPath();\n                        globalContext.arc(\n                            currAnim.hull[i].x,\n                            currAnim.hull[i].y,\n                            pointRadius,\n                            0,\n                            2 * Math.PI\n                        );\n                        globalContext.fill();\n                    }\n\n                    if (i === animations.length - 1) {\n                        animating = false;\n                        props.animationFinished();\n                    }\n                }, (animationSpeed * i) / JARVIS_SPEED)\n            );\n        }\n    } else {\n        stopAnimation();\n    }\n\n    // globalContext.strokeStyle = \"mediumpurple\";\n    // globalContext.lineWidth = 10;\n\n    // globalContext.beginPath();\n    // globalContext.moveTo(convexHull[0].x, convexHull[0].y);\n    // for (let i = 1; i < convexHull.length; ++i) {\n    //     globalContext.lineTo(convexHull[i].x, convexHull[i].y);\n    // }\n\n    // globalContext.stroke();\n};\n\nconst grahamScan = () => {\n    // Execute graham scan\n};\n\nconst quickHull = (props) => {\n    if (!animating) {\n        animating = true;\n        // Execute quickhull\n        clearTimeouts();\n\n        // Execute jarvis march\n        let animations = getQuickhullAnimations(points);\n\n        for (let i = 0; i < animations.length; ++i) {\n            timeouts.push(\n                setTimeout(() => {\n                    globalContext.clearRect(\n                        0,\n                        0,\n                        globalContext.canvas.width,\n                        globalContext.canvas.height\n                    );\n\n                    let currAnim = animations[i];\n                    globalContext.lineWidth = strokeWidth;\n\n                    if (currAnim.a !== null) {\n                        // draw current comparison\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = CURR_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(currAnim.b.x, currAnim.b.y);\n                        globalContext.stroke();\n                    }\n\n                    if (currAnim.currBest != null) {\n                        // draw current best\n                        globalContext.beginPath();\n                        globalContext.strokeStyle = EXTRA_COLOR;\n                        globalContext.moveTo(currAnim.a.x, currAnim.a.y);\n                        globalContext.lineTo(\n                            currAnim.currBest.x,\n                            currAnim.currBest.y\n                        );\n                        globalContext.stroke();\n                    }\n\n                    // draw hull so far\n                    globalContext.beginPath();\n                    globalContext.strokeStyle = HULL_COLOR;\n                    drawConvexHullQH(currAnim.hull);\n                    globalContext.stroke();\n\n                    simpleDrawPoints();\n\n                    globalContext.fillStyle = HULL_COLOR;\n\n                    globalContext.moveTo(\n                        currAnim.hull[0].x,\n                        currAnim.hull[0].y\n                    );\n                    for (let i = 0; i < currAnim.hull.length; ++i) {\n                        globalContext.beginPath();\n                        globalContext.arc(\n                            currAnim.hull[i].x,\n                            currAnim.hull[i].y,\n                            pointRadius,\n                            0,\n                            2 * Math.PI\n                        );\n                        globalContext.fill();\n                    }\n\n                    if (i === animations.length - 1) {\n                        animating = false;\n                        props.animationFinished();\n                    }\n                }, (animationSpeed * i) / QUICKHULL_SPEED)\n            );\n        }\n    } else {\n        stopAnimation();\n    }\n};\n\nconst getPixelRatio = (context) => {\n    var backingStore =\n        context.backingStorePixelRatio ||\n        context.webkitBackingStorePixelRatio ||\n        context.mozBackingStorePixelRatio ||\n        context.msBackingStorePixelRatio ||\n        context.oBackingStorePixelRatio ||\n        context.backingStorePixelRatio ||\n        1;\n\n    return (window.devicePixelRatio || 1) / backingStore;\n};\n\nconst stopAnimation = () => {\n    animating = false;\n    clearTimeouts();\n    globalContext.clearRect(\n        0,\n        0,\n        globalContext.canvas.width,\n        globalContext.canvas.height\n    );\n    simpleDrawPoints();\n};\n\nconst deletePoints = () => {\n    clearTimeouts();\n    for (let i = 0; i < 4; ++i) {\n        timeouts.push(\n            setTimeout(() => {\n                globalContext.clearRect(\n                    0,\n                    0,\n                    globalContext.canvas.width,\n                    globalContext.canvas.height\n                );\n\n                for (let j = 0; j < points.length; ++j) {\n                    let p = points[j];\n                    globalContext.beginPath();\n                    globalContext.arc(p.x, p.y, (3 - i) * 3, 0, 2 * Math.PI);\n                    globalContext.fill();\n                }\n\n                if (i === 3) {\n                    points = [];\n                    globalContext.clearRect(\n                        0,\n                        0,\n                        globalContext.canvas.width,\n                        globalContext.canvas.height\n                    );\n                }\n            }, (i * animationSpeed) / 1.5)\n        );\n    }\n\n    // points = [];\n    // globalContext.clearRect(\n    //     0,\n    //     0,\n    //     globalContext.canvas.width,\n    //     globalContext.canvas.height\n    // );\n    // simpleDrawPoints();\n};\n\nconst canvasClicked = (e, ratio) => {\n    globalContext.fillStyle = POINT_COLOR;\n    let p = {\n        x: e.clientX * window.devicePixelRatio,\n        y: e.clientY * window.devicePixelRatio - 175 * window.devicePixelRatio,\n    };\n    points.push(p);\n\n    for (let j = 0; j < 5; ++j) {\n        timeouts.push(\n            setTimeout(() => {\n                globalContext.beginPath();\n                globalContext.arc(\n                    p.x,\n                    p.y,\n                    (j * pointRadius) / 5,\n                    0,\n                    2 * Math.PI\n                );\n                globalContext.fill();\n            }, j * 50)\n        );\n    }\n\n    //simpleDrawPoints();\n};\n\nconst ConvexHullVisualizer = forwardRef((props, ref) => {\n    let canvasRef = useRef();\n    pointRadius = 7.5 * window.devicePixelRatio;\n    strokeWidth = 5 * window.devicePixelRatio;\n\n    useImperativeHandle(ref, () => ({\n        generateRandomPoints() {\n            timeouts.forEach((t) => {\n                clearTimeout(t);\n            });\n            timeouts = [];\n\n            globalContext.clearRect(\n                0,\n                0,\n                globalContext.canvas.width,\n                globalContext.canvas.height\n            );\n\n            points = [];\n            for (let i = 0; i < numberOfPoints; ++i) {\n                let randomVec = {\n                    x: getRandomInt(200, canvasWidth - 200),\n                    y: getRandomInt(200, canvasHeight - 200),\n                };\n                points.push(randomVec);\n            }\n\n            renderPoints(globalContext);\n        },\n        runJarvisMarch() {\n            jarvisMarch(props);\n        },\n        runQuickhull() {\n            quickHull(props);\n        },\n        runDeletePoints() {\n            deletePoints();\n        },\n    }));\n\n    useEffect(() => {\n        let canvas = canvasRef.current;\n        let context = canvas.getContext(\"2d\");\n        globalContext = context;\n\n        let ratio = getPixelRatio(context);\n        let width = getComputedStyle(canvas)\n            .getPropertyValue(\"width\")\n            .slice(0, -2);\n        let height = getComputedStyle(canvas)\n            .getPropertyValue(\"height\")\n            .slice(0, -2);\n\n        canvas.width = width * ratio;\n        canvas.height = height * ratio * 0.8;\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height * 0.8}px`;\n\n        canvasWidth = canvas.width;\n        canvasHeight = canvas.height;\n\n        let requestId;\n\n        // Render Setup\n        generateRandomPoints();\n\n        context.beginPath();\n\n        context.fillStyle = POINT_COLOR;\n        renderPoints(context);\n\n        context.fill();\n\n        canvas.addEventListener(\n            \"click\",\n            function (e) {\n                canvasClicked(e, ratio);\n            },\n            false\n        );\n\n        // Main render function\n        const render = () => {\n            //context.clearRect(0, 0, canvas.width, canvas.height);\n            // context.beginPath();\n            // context.fillStyle = POINT_COLOR;\n            // renderPoints(context);\n            // context.fill();\n            // requestId = requestAnimationFrame(render);\n        };\n\n        render();\n\n        return () => {\n            cancelAnimationFrame(requestId);\n        };\n    });\n\n    return (\n        <div className=\"convexhull\">\n            <canvas ref={canvasRef} style={{ width: \"100%\", height: \"100%\" }} />\n        </div>\n    );\n});\n\n// Utility function creating an int in the specified range\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport default ConvexHullVisualizer;\n","import { getLeftmostPoint, checkLineForPoint } from \"./util.js\";\n\nexport function getJarvisMarchAnimations(points) {\n\tlet animations = [];\n\n\tlet pointOnHull = getLeftmostPoint(points);\n\tlet endpoint = points[0];\n\tlet convexHull = [];\n\n\tlet i = 0;\n\twhile (endpoint !== convexHull[0]) {\n\t\tconvexHull.push(pointOnHull);\n\t\tendpoint = points[0];\n\n\t\tanimations.push({\n\t\t\ta: convexHull[i],\n\t\t\tb: endpoint,\n\t\t\tcurrBest: endpoint,\n\t\t\thull: convexHull.slice(0),\n\t\t});\n\n\t\tfor (let j = 0; j < points.length; ++j) {\n\t\t\tanimations.push({\n\t\t\t\ta: convexHull[i],\n\t\t\t\tb: points[j],\n\t\t\t\tcurrBest: endpoint,\n\t\t\t\thull: convexHull.slice(0),\n\t\t\t});\n\n\t\t\tif (endpoint === pointOnHull || checkLineForPoint(convexHull[i], endpoint, points[j]) === -1) {\n\t\t\t\tendpoint = points[j];\n\n\t\t\t\tanimations.push({\n\t\t\t\t\ta: convexHull[i],\n\t\t\t\t\tb: points[j],\n\t\t\t\t\tcurrBest: endpoint,\n\t\t\t\t\thull: convexHull.slice(0),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ti += 1;\n\t\tpointOnHull = endpoint;\n\t}\n\n\tconvexHull.push(convexHull[0]);\n\n\tanimations.push({\n\t\ta: null,\n\t\tb: null,\n\t\tcurrBest: null,\n\t\thull: convexHull,\n\t});\n\n\treturn animations;\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Controls extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            numPoints: 100,\n            enabled: [true, true, true, true, true, true, true, true, true],\n            sliderEnabled: true,\n        };\n    }\n\n    childFunction = (algo) => {\n        this.props.functionCallFromParent(algo);\n\n        const algoButtons = document.getElementsByClassName(\"algoBtn\");\n        var enabled = [];\n        const numBars = this.state.numPoints;\n\n        var sliderEnabled = false;\n\n        if (algo !== 0 && algo !== 4) {\n            if (!this.state.enabled[0]) {\n                for (let i = 0; i < this.state.enabled.length; ++i) {\n                    enabled[i] = true;\n                    algoButtons[algo - 1].id = \"none\";\n                }\n                sliderEnabled = true;\n            } else {\n                for (let i = 0; i < this.state.enabled.length; ++i) {\n                    enabled[i] = false;\n                }\n\n                enabled[algo] = true;\n                algoButtons[algo - 1].id = \"playing\";\n            }\n\n            this.setState({ numBars, enabled, sliderEnabled });\n        }\n    };\n\n    enableUI() {\n        const buttons = document.getElementsByClassName(\"algoBtn\");\n\n        const enabled = [true];\n\n        for (let i = 0; i < buttons.length; ++i) {\n            enabled.push(true);\n            buttons[i].id = \"none\";\n        }\n\n        enabled.push(true);\n\n        const numBars = this.state.numPoints;\n\n        this.setState({ numBars, enabled, sliderEnabled: true });\n    }\n\n    updateBars = () => {\n        this.props.updateBars();\n    };\n\n    setNumBars() {\n        var slider = document.getElementById(\"numberOfBars\");\n        const numBars = slider.value;\n        //this.resetArray();\n        this.setState({ numBars });\n        this.updateBars();\n    }\n\n    render() {\n        return (\n            <div className=\"controls\">\n                <button\n                    onClick={() => this.childFunction(0)}\n                    className=\"randomizeBtn\"\n                    disabled={!this.state.enabled[0]}\n                >\n                    Generate Points\n                </button>\n                <button\n                    onClick={() => this.childFunction(1)}\n                    className=\"algoBtn\"\n                    id=\"jarvisBtn\"\n                    disabled={!this.state.enabled[1]}\n                >\n                    Jarvis March\n                </button>\n                <button\n                    onClick={() => this.childFunction(2)}\n                    className=\"algoBtn\"\n                    id=\"grahamBtn\"\n                    disabled={!this.state.enabled[2]}\n                >\n                    Graham Scan\n                </button>\n                <button\n                    onClick={() => this.childFunction(3)}\n                    className=\"algoBtn\"\n                    id=\"quickhullBtn\"\n                    disabled={!this.state.enabled[3]}\n                >\n                    QuickHull\n                </button>\n                <button\n                    onClick={() => this.childFunction(4)}\n                    className=\"deleteBtn\"\n                    disabled={!this.state.enabled[4]}\n                >\n                    <FontAwesomeIcon\n                        className=\"trash\"\n                        transform=\"shrink-4 up-3\"\n                        size=\"2x\"\n                        icon={faTrash}\n                    />\n                </button>\n                {/* <br />\n        <p>Number of bars: {this.state.numPoints}</p>\n        <input\n          type=\"range\"\n          min=\"10\"\n          max=\"300\"\n          value={this.state.numPoints}\n          disabled={!this.state.sliderEnabled}\n          className=\"slider\"\n          id=\"numberOfPoints\"\n          onChange={() => this.setNumBars()}\n        /> */}\n            </div>\n        );\n    }\n}\n\nexport default Controls;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConvexHullVisualizer from \"./ConvexHullVisualizer\";\nimport Controls from \"./Controls\";\n\nvar numberOfBars = 10;\n\nvar algo = 0;\n\nclass Main extends Component {\n    parentFunction = (data_from_child) => {\n        algo = data_from_child;\n        const visualizer = this.refs.child;\n\n        switch (data_from_child) {\n            case 0:\n                visualizer.generateRandomPoints();\n                //visualizer.resetArray();\n                break;\n            case 1:\n                visualizer.runJarvisMarch();\n                //visualizer.mergeSort();\n                break;\n            case 2:\n                visualizer.runGrahamScan();\n                //visualizer.quickSort();\n                break;\n            case 3:\n                visualizer.runQuickhull();\n                //visualizer.heapSort();\n                break;\n            case 4:\n                visualizer.runDeletePoints();\n                //visualizer.selectionSort();\n                break;\n            default:\n                break;\n        }\n    };\n\n    updateBars = () => {\n        //this.refs.child.setNumberOfBars();\n    };\n\n    animationFinished = () => {\n        this.refs.controlChild.enableUI();\n    };\n\n    render() {\n        return (\n            <div>\n                <Controls\n                    ref=\"controlChild\"\n                    functionCallFromParent={this.parentFunction.bind(this)}\n                    updateBars={this.updateBars.bind(this)}\n                ></Controls>\n                <ConvexHullVisualizer\n                    ref=\"child\"\n                    animationFinished={this.animationFinished.bind(this)}\n                ></ConvexHullVisualizer>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './Style/style.css';\nimport Main from './Components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}